---
title: "BRFSS 2022 - Diabetes and Obesity in TX"
author: "Kaitlan"
format: html
editor: visual
---

**Step 1: Load data. Rename column names and filter for Texas.**

```{r}

# Load the required libraries
library(haven)
library(dplyr)
library(survey)

# Read the XPT file
data <- read_xpt("LLCP2022.XPT")

# Rename columns for convenience
data <- data %>%
  rename(
    STATE = `_STATE`,
    STSTR = `_STSTR`,
    LLCPWT = `_LLCPWT`,
    BMI5CAT = `_BMI5CAT`,
    RACE1 = `_RACE1`,
    AGE65YR = `_AGE65YR`
  )

# Filter for Texas
data_tx <- data %>% filter(STATE == 48) # 48 is the FIPS code for Texas
```

**Step 2: Prep the data by recoding variables.**

```{r}

# Mutate the race variable
new_data <- data_tx %>%

  mutate(race_recode = case_when(
    RACE1 == 1 ~ "White, non-Hispanic",
    RACE1 == 2 ~ "Black, non-Hispanic",
    RACE1 == 3 ~ "American Indian, non-Hispanic",
    RACE1 == 4 ~ "Asian, non-Hispanic",
    RACE1 == 5 ~ "Native Hawaiian or other Pacific Islander, non-Hispanic",
    RACE1 == 7 ~ "Multiracial, non-Hispanic",
    RACE1 == 8 ~ "Hispanic",
    TRUE ~ NA_character_),
    
  obesity = case_when(
    BMI5CAT == 4 ~ "Obese",
    BMI5CAT == 3 ~ "Overweight",
    BMI5CAT == 2 ~ "Normal Weight",
    BMI5CAT == 1 ~ "Underweight",
    TRUE ~ NA_character_
  ),
  
  diabetes = case_when(
    DIABETE4 == 4 ~ "No, pre-diabetes or borderline diabetes",
    DIABETE4 == 3 ~ "No",
    DIABETE4 == 2 ~ "Yes, gestational",
    DIABETE4 == 1 ~ "Yes",
    TRUE ~ NA_character_
  ),
  
  age = case_when(
    AGE65YR == 1 ~ "18 to 64",
    AGE65YR == 2 ~ "65 or older",
    TRUE ~ NA_character_
  
  ))


```

**Step 3: Create survey design. STRATA and WEIGHT statements must be added to take into account**

**the sampling design.**

```{r}
# Create survey design

options(survey.lonely.psu = "adjust")
library(survey)
# Create survey design object
my_design <- svydesign(ids = ~1,
                       strata = ~STSTR,
                       weights = ~LLCPWT,
                       data = new_data)
```

**Step 4: Create a dataframe with diabetes and obesity rates by race/ethnicity.**

```{r}

# Use svytable() to create a table of race by diabetes status
diabetes_race_table <- svytable(~ race_recode + diabetes, design = my_design)

diabetes_race_df <- as.data.frame(diabetes_race_table) # Convert the table to a data frame

# Calculate the percentages for diabetes
diabetes_race_df <- diabetes_race_df %>%
  group_by(race_recode) %>%
  mutate(total = sum(Freq),
         percentage = Freq / total)

# Summarize the total number and percentage of peoeple with diabetes
diabetes_summary <- diabetes_race_df %>%
  group_by(diabetes) %>%
  summarize(total_people = sum(Freq),
            percent_people = sum(Freq) / sum(diabetes_race_df$Freq))

# View the table with counts and percentages for diabetes
print(diabetes_race_df)
print(diabetes_summary)



# Use svytable() to create a table of race by obesity status
obesity_race_table <- svytable(~ race_recode + obesity, design = my_design)

obesity_race_df <- as.data.frame(obesity_race_table) # Convert the table to a data frame

# Calculate the percentages for obesity
obesity_race_df <- obesity_race_df %>%
  group_by(race_recode) %>%
  mutate(total = sum(Freq),
         percentage = Freq / total)

# Summarize the total number and percentages for each obesity status
obesity_summary <- obesity_race_df %>%
  group_by(obesity) %>%
  summarize(total_people = sum(Freq),
            percent_people = sum(Freq) / sum(obesity_race_df$Freq))

# View the table with counts and percentages for obesity
print(obesity_race_df)
print(obesity_summary)




###################################################################################

### Adding age breakdown

# Use svytable() to create a table of race by diabetes status
diabetes_age_table <- svytable(~ age + diabetes, design = my_design)

diabetes_age_df <- as.data.frame(diabetes_age_table) # Convert the table to a data frame

# Calculate the percentages for diabetes
diabetes_age_df <- diabetes_age_df %>%
  group_by(age) %>%
  mutate(total = sum(Freq),
         percentage = Freq / total)

# View the table with counts and percentages for diabetes
print(diabetes_age_df)



# Use svytable() to create a table of race by obesity status
obesity_age_table <- svytable(~ age + obesity, design = my_design)

obesity_age_df <- as.data.frame(obesity_age_table) # Convert the table to a data frame

# Calculate the percentages for obesity
obesity_age_df <- obesity_age_df %>%
  group_by(age) %>%
  mutate(total = sum(Freq),
         percentage = Freq / total)

# View the table with counts and percentages for obesity
print(obesity_age_df)
```

**Step 5: Save to Excel.**

```{r}

library(writexl)

write_xlsx(diabetes_race_df, path = "Diabetes Rates by Race 2022.xlsx")

write_xlsx(obesity_race_df, path = "Obesity Rates by Race 2022.xlsx")


write_xlsx(diabetes_summary, path = "Diabetes Total Pop 2022.xlsx")

write_xlsx(obesity_summary, path = "Obesity Total Pop 2022.xlsx")

```

```{r}

library(writexl)

# save age tables

write_xlsx(diabetes_age_df, path = "Diabetes Rates by Age 2022.xlsx")

write_xlsx(obesity_age_df, path = "Obesity Rates by Age 2022.xlsx")

```
